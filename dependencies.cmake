
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake-modules/")

FIND_PACKAGE(ZLIB REQUIRED)
INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})

# OPTION(Boost_NO_BOOST_CMAKE "" ON)
OPTION(Boost_DEBUG "" OFF)
FIND_PACKAGE(Boost REQUIRED COMPONENTS system)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})

# Will have to make this work with other platforms.

IF (NOT Boost_LIBRARIES)
  MESSAGE(STATUS "Didn't find the library files.")
  MESSAGE(STATUS "Setting them to defaults.")
  FILE(
    GLOB Boost_LIBRARIES
    /usr/lib/x86_64-linux-gnu/libboost_*.so.*.*.*
  )
ENDIF()

FIND_PACKAGE(LibPThread REQUIRED)

FIND_PACKAGE(CURL REQUIRED)
INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIRS})

FIND_PACKAGE(SQLite REQUIRED)

FIND_PACKAGE(OpenSSL REQUIRED)
INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})

#MESSAGE(STATUS ${LibreSSL_LIBRARIES})

INCLUDE_DIRECTORIES(${SQLITE_INCLUDE_DIR})

# discordpp
INCLUDE_DIRECTORIES(SYSTEM ${CMAKE_SOURCE_DIR}/discordpp)
INCLUDE_DIRECTORIES(SYSTEM ${CMAKE_SOURCE_DIR}/lib/curlpp/include)
INCLUDE_DIRECTORIES(SYSTEM ${CMAKE_SOURCE_DIR}/aho_corasick/src/aho_corasick)

# SET(PROJECT_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/../FileUtil)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif(NOT CMAKE_BUILD_TYPE)

# Was going to pass in -Weffc++ but it blindly tells you to initialise fields in an
# initialiser list, even when it's more readable to initialise it in the constructor
# body.
SET(COMMON_FLAGS "-std=c++17 -Wall -Wpedantic -Wextra -Werror -fno-builtin")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${COMMON_FLAGS} -O0 -g")
#SET(CMAKE_C_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -ffat-lto-objects -flto")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${COMMON_FLAGS} -O3 -ffat-lto-objects -flto -fPIC")
SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS}")
SET(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} -ffat-lto-objects -flto -Wno-error")
SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS}")
SET(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS}")
